#!/bin/sh -e

DEFAULT_RUNDIR=$(uci get resolver.kresd.rundir)
TMP_HINTS_CONFIG=$DEFAULT_RUNDIR/hints.tmp			#generated by kresd
TMP_HINTS_CONFIG_EMPTY=$DEFAULT_RUNDIR/hints_empty.tmp		#empty file to clear hints
TMP_HINTS_CONFIG_DYNAMIC=$DEFAULT_RUNDIR/hints_dynamic.tmp
TMP_DHCP_LEASES=$DEFAULT_RUNDIR/dhcpleases.tmp

TTY_PATH=$DEFAULT_RUNDIR/tty/$(pidof kresd)
LOCAL_DOMAIN=$(uci get dhcp.@dnsmasq[0].local| sed 's|/||g')
DHCP_LEASES=/tmp/dhcp.leases

DEBUG_ON=0

debug() {
	if [ "$DEBUG_ON" = "1" ]; then
		echo "Debug" $0
		echo "$@" >>/tmp/kresd/debug.log
	fi
}

add_dhcp_record() {
	local hostname=$1
	local ipv4=$2

	sed -i  "/$hostname/d" $TMP_DHCP_LEASES
	sed -i  "/$ipv4/d" $TMP_DHCP_LEASES

	echo "$ipv4 $hostname" >> $TMP_DHCP_LEASES
}

del_dhcp_record() {
	local hostname=$1
	local ipv4=$2

	sed -i  "/$hostname/d" $TMP_DHCP_LEASES
	sed -i  "/$ipv4/d" $TMP_DHCP_LEASES
}

dhcp_action() {
	local mac=$1
	local ipv4=$2
	local op=$3
	local hostname=""

	if [[ -z "$DNSMASQ_SUPPLIED_HOSTNAME" ]]; then
		DNSMASQ_SUPPLIED_HOSTNAME='*'
	fi

	if [ "$DNSMASQ_SUPPLIED_HOSTNAME" = '*' ]; then
		return -1
	fi

	hostname=$DNSMASQ_SUPPLIED_HOSTNAME.$LOCAL_DOMAIN

	if [ "$op" = "add" ]; then
		debug "add" $hostname $ipv4
		del_dhcp_record $hostname $ipv4
		add_dhcp_record $hostname $ipv4
	fi

	if [ "$op" = "del" ]; then
		debug "del" $hostname $ipv4
		del_dhcp_record $hostname $ipv4
	fi

	if [ "$op" = "old" ]; then
		debug "old" $hostname $ipv4
		del_dhcp_record $hostname $ipv4
		add_dhcp_record $hostname $ipv4
	fi
}

dhcp_init() {
	datum=$(date)
	debug "init dhcp" $datum
	while read line; do
		ip=$(echo "$line"|awk '{print $3}')
		name=$(echo "$line"|awk '{print $4}')
		if [ "$name" != '*' ]; then
			echo $ip $name.$LOCAL_DOMAIN>>$TMP_DHCP_LEASES
		fi
	echo "!"
	done <$DHCP_LEASES
}

clean_hints() {
	local filepath=$1
        sort -u $filepath >$filepath.bak
        mv $filepath.bak $filepath
        sed -i '/^\s*$/d' $filepath
}

clear_hints() { #clear all hints record from kresd
	echo "">$TMP_HINTS_CONFIG_EMPTY
	echo "hints.config('$TMP_HINTS_CONFIG_EMPTY')" | socat - UNIX-CONNECT:$TTY_PATH > /dev/null 2>&1
}

load_dynamic_hints() {
	debug "call load_dynamic_hints"
	#init dynamic hints file
	echo "#Do not edit">$TMP_HINTS_CONFIG_DYNAMIC
	echo "#file generated from $TMP_HINTS_CONFIG and $DHCP_LEASES ">>$TMP_HINTS_CONFIG_DYNAMIC

	#copy static hints
	cat $TMP_HINTS_CONFIG>>$TMP_HINTS_CONFIG_DYNAMIC

	#clean dhcp leases
	clean_hints $TMP_DHCP_LEASES

	#copy dynamic hints
	cat $TMP_DHCP_LEASES>>$TMP_HINTS_CONFIG_DYNAMIC

	#clean leases
	clean_hints $TMP_HINTS_CONFIG_DYNAMIC

	#load generated hints file
	echo "hints.config('$TMP_HINTS_CONFIG_DYNAMIC')" | socat - UNIX-CONNECT:$TTY_PATH  > /dev/null 2>&1
}


arg_mac=$2
arg_ipv4=$3
arg_op=$1

prefered_resolver=$(uci get resolver.common.prefered_resolver)
enable_dynamic_domains=$(uci get resolver.kresd.dynamic_domains)


#init with dhcp leases
dhcp_init
#parse action
dhcp_action $arg_mac $arg_ipv4 $arg_op

if [ "$prefered_resolver" = "kresd" ] && [ "$enable_dynamic_domains" = "1" ]; then
	clear_hints
	load_dynamic_hints
fi
